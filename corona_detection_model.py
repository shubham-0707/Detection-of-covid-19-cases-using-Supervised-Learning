# -*- coding: utf-8 -*-
"""Corona_Detection_Model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10Q98NzzZ4U0qSmNB7-slOFaGARMUL03m
"""

import pandas as pd

data = pd.read_csv("/content/drive/MyDrive/covid_data_2020-2021.csv.zip")

data.head()

data.shape

data = data.drop('test_date' , axis = 1)

data.shape



"""**Checking duplicates**"""

data.duplicated().any()

data.drop_duplicates()

"""**Checking null values**"""

data.isnull().any().sum()

"""**Checking the number of unique values**"""

data['age_60_and_above'].unique()

data['corona_result'].unique()

data['gender'].unique()

data['test_indication'].unique()

"""Since the values are in Strings thats why we have to convert these values to integer format to apply models on it...

**Applying Label Encoder on the particular columns to convert them to integer...**
"""

from sklearn.preprocessing import LabelEncoder
k=LabelEncoder()

data['gender'] = k.fit_transform(data['gender'])

data['corona_result'] = k.fit_transform(data['corona_result'])

data['test_indication'] = k.fit_transform(data['test_indication'])

data['age_60_and_above'] = k.fit_transform(data['age_60_and_above'])

"""Now checking the values that are stored in place of the strings.....

"""

data.head()

"""We can clearly see that all the strings are now changed to the 0 and 1 form......

**Our target is Corona Result...Hence we are going to divide the data in x and y**
"""

x = data.drop('corona_result' , axis=1)

y = data['corona_result']

import sklearn 
from sklearn import metrics
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split 
x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=1/3,random_state=0)

model = LogisticRegression(solver='liblinear')

model.fit(x_train , y_train)

model.score(x_train , y_train)

model.score(x_test , y_test)

"""The trainig score and testing score in LogisticRegreesion Model is 90.84% ...So to increase this score we will now chcek this with another model...

**We are now going to use Random Forest Classifier**
"""

from sklearn.ensemble import RandomForestClassifier

rfc = RandomForestClassifier()

rfc.fit(x_train, y_train)

rfc.score(x_train , y_train)

rfc.score(x_test , y_test)

"""**Since the Random Forest Classifier increases the score but still the score is not as good as we want...**

**Now we are going to use the Naive Bayes Classifier**
"""

from sklearn.naive_bayes import GaussianNB

gnb = GaussianNB()

gnb.fit(x_train , y_train)

gnb.score(x_train , y_train)

gnb.score(x_test , y_test)



"""Oh my God the score is decreasing now...

**Since the highest score is still 91.53% therefore we will now try XGBoost Classifier**
"""

import xgboost as xgb
xgboost = xgb.XGBClassifier(use_label_encoder=True, eval_metric='mlogloss')

xgboost.fit(x_train , y_train)

xgboost.score(x_train , y_train)

xgboost.score(x_test , y_test)

"""**Since after using XGBoost we are getting only 91.39% of accuracy thats why we can say that this is the highest accuracy of the data given....**

**We cannot achieve more accuracy on that...**

Now I am going to make some charts for visualization purposes...
"""

print("Prediction on Train Data_Set")
yp_train = model.predict(x_train)
data = pd.DataFrame({'Actual':y_train,'Predicted':yp_train}) 
data.head(10)

import matplotlib.pyplot as plt
plt.figure(figsize=(10,10))
data["Actual"][:25,].plot.line()
data["Predicted"][:25,].plot.line()
plt.legend()
plt.show()

import seaborn as sns

print('Error Exists in training data')
fig = plt.figure()
sns.distplot((y_train - yp_train), bins = 20)
fig.suptitle('Error Terms', fontsize = 20)
plt.xlabel('Errors', fontsize = 18)

df = pd.DataFrame(data, columns = ['cough', 'fever', 
                                    'sore_throat', 'shortness_of_breath',
                                    'head_ache', 'corona_result' , 'age_60_and_above' , 'gender' , 'test_indication'] )

df.hist()

plt.show()

plt.scatter(df['corona_result'], df['gender'])
plt.show()

plt.scatter(df['corona_result'], df['age_60_and_above'])
plt.show()

plt.scatter(df['cough'], df['test_indication'])
plt.show()

plt.scatter(df['cough'], df['fever'])
plt.show()

plt.scatter(df['shortness_of_breath'], df['gender'])
plt.show()

